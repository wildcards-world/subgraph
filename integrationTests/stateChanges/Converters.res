// Generated by Codegen.res, PLEASE EDIT WITH CARE

open ConverterTypes


type stateChanges =
  | Unclassified(unclassifiedEvent)

let covertToStateChange = (eventName, paramsObject) => {
  // TODO: throw a (descriptive) error if the array of parameters are wrong somehow (or make a separate test?)
  switch eventName {
  | name => Unclassified({name: name, data: paramsObject})
  }
}

type eventGroup = {
  allUnclassifiedEvents: array<ConverterTypes.unclassifiedEvent>,
}
let emptyEventGroups = {
  allUnclassifiedEvents: [],
}

let addEventToCorrectGrouping = (
  currentEventGroups,
  {ConverterTypes.blockNumber: blockNumber, timestamp, txHash, data},
) => {
  switch data {
  | Unclassified(event) => {
      ...currentEventGroups,
      allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents->Array.concat([event]),
    }
  }
} 
