// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Client = require("./util/Client.bs.js");
var GqlConverters = require("./util/GqlConverters.bs.js");
var ApolloClient__React_Hooks_UseQuery = require("rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js");

var Raw = {};

var query = (require("@apollo/client").gql`
  query   {
    stateChanges(first: 1000)  {
      __typename
      id
      txEventParamList  {
        __typename
        eventName
        params  {
          __typename
          param
          paramName
          paramType
        }
      }
      blockNumber
      timestamp
    }
  }
`);

function parse(value) {
  var value$1 = value.stateChanges;
  return {
          stateChanges: value$1.map(function (value) {
                var value$1 = value.txEventParamList;
                return {
                        __typename: value.__typename,
                        id: value.id,
                        txEventParamList: value$1.map(function (value) {
                              var value$1 = value.params;
                              return {
                                      __typename: value.__typename,
                                      eventName: value.eventName,
                                      params: value$1.map(function (value) {
                                            return {
                                                    __typename: value.__typename,
                                                    param: value.param,
                                                    paramName: value.paramName,
                                                    paramType: value.paramType
                                                  };
                                          })
                                    };
                            }),
                        blockNumber: GqlConverters.$$BigInt.parse(value.blockNumber),
                        timestamp: GqlConverters.$$BigInt.parse(value.timestamp)
                      };
              })
        };
}

function serialize(value) {
  var value$1 = value.stateChanges;
  var stateChanges = value$1.map(function (value) {
        var value$1 = value.timestamp;
        var value$2 = GqlConverters.$$BigInt.serialize(value$1);
        var value$3 = value.blockNumber;
        var value$4 = GqlConverters.$$BigInt.serialize(value$3);
        var value$5 = value.txEventParamList;
        var txEventParamList = value$5.map(function (value) {
              var value$1 = value.params;
              var params = value$1.map(function (value) {
                    var value$1 = value.paramType;
                    var value$2 = value.paramName;
                    var value$3 = value.param;
                    var value$4 = value.__typename;
                    return {
                            __typename: value$4,
                            param: value$3,
                            paramName: value$2,
                            paramType: value$1
                          };
                  });
              var value$2 = value.eventName;
              var value$3 = value.__typename;
              return {
                      __typename: value$3,
                      eventName: value$2,
                      params: params
                    };
            });
        var value$6 = value.id;
        var value$7 = value.__typename;
        return {
                __typename: value$7,
                id: value$6,
                txEventParamList: txEventParamList,
                blockNumber: value$4,
                timestamp: value$2
              };
      });
  return {
          stateChanges: stateChanges
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var GetAllStateChanges_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var GetAllStateChanges_refetchQueryDescription = include.refetchQueryDescription;

var GetAllStateChanges_use = include.use;

var GetAllStateChanges_useLazy = include.useLazy;

var GetAllStateChanges_useLazyWithVariables = include.useLazyWithVariables;

var GetAllStateChanges = {
  GetAllStateChanges_inner: GetAllStateChanges_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: GetAllStateChanges_refetchQueryDescription,
  use: GetAllStateChanges_use,
  useLazy: GetAllStateChanges_useLazy,
  useLazyWithVariables: GetAllStateChanges_useLazyWithVariables
};

function getAllStateChanges(param) {
  var __x = Curry._6(Client.instance.rescript_query, {
        query: query,
        Raw: Raw,
        parse: parse,
        serialize: serialize,
        serializeVariables: serializeVariables
      }, undefined, undefined, undefined, undefined, undefined);
  return __x.then(function (result) {
              if (result.TAG === /* Ok */0) {
                return Promise.resolve(result._0.data.stateChanges);
              } else {
                return Promise.reject(result._0);
              }
            });
}

var ApolloQueryResult;

exports.ApolloQueryResult = ApolloQueryResult;
exports.GetAllStateChanges = GetAllStateChanges;
exports.getAllStateChanges = getAllStateChanges;
/* query Not a pure module */
